# test_core.py

import pytest
from cortex_core import CortexCore

@pytest.fixture
def core():
    # Create a new instance of CortexCore for each test.
    return CortexCore()

def test_valid_input(core):
    """
    Test that a valid input from an authenticated user is processed.
    For code-related queries, the response should be generated by the domain expert.
    """
    user_id = "user1"
    token = "secret-token"
    input_text = "Can you help me write some code for sorting a list?"
    
    response = core.process_input(user_id, input_text, token)
    
    # Since the input mentions 'code', it should delegate to the domain expert.
    assert "CodeAssistant:" in response, "Expected the domain expert to handle code requests."

def test_non_code_input(core):
    """
    Test that an input not requiring delegation is processed internally.
    """
    user_id = "user1"
    token = "secret-token"
    input_text = "What's the weather today?"
    
    response = core.process_input(user_id, input_text, token)
    
    # For non-code inputs, the response should include "Processed input:".
    assert "Processed input:" in response, "Expected internal processing for non-code queries."

def test_auth_failure(core):
    """
    Test that an invalid authentication token results in an authentication failure.
    """
    user_id = "user1"
    token = "invalid-token"
    input_text = "Tell me something interesting."
    
    response = core.process_input(user_id, input_text, token)
    assert response == "Authentication failed", "Expected authentication failure with invalid token."
